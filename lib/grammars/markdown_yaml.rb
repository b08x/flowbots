# Autogenerated from a Treetop grammar. Edits may be lost.

module MarkdownYaml
  include Treetop::Runtime

  # The root node of the grammar.
  #
  # @return [Treetop::Runtime::SyntaxNode] The root node of the grammar.
  def root
    @root ||= :document
  end

  # The Document node represents the entire document structure.
  # It contains the YAML front matter and the Markdown content.
  module Document0
    # The YAML front matter section of the document.
    #
    # @return [Treetop::Runtime::SyntaxNode] The YAML front matter node.
    def yaml_front_matter
      elements[0]
    end

    # The Markdown content section of the document.
    #
    # @return [Treetop::Runtime::SyntaxNode] The Markdown content node.
    def markdown_content
      elements[1]
    end
  end

  # Parses the document node.
  #
  # @return [Treetop::Runtime::SyntaxNode] The parsed document node.
  def _nt_document
    start_index = index
    if node_cache[:document].has_key?(index)
      cached = node_cache[:document][index]
      if cached
        node_cache[:document][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s0 = []
    r1 = _nt_yaml_front_matter
    s0 << r1
    if r1
      r2 = _nt_markdown_content
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode, input, i0...index, s0)
      r0.extend(Document0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:document][start_index] = r0

    r0
  end

  # The YamlFrontMatter node represents the YAML front matter section.
  module YamlFrontMatter0
  end

  # The YamlFrontMatter node represents the YAML front matter section.
  module YamlFrontMatter1
    # The first newline character after the "---" delimiter.
    #
    # @return [Treetop::Runtime::SyntaxNode] The first newline node.
    def newline1
      elements[1]
    end

    # The second newline character after the "---" delimiter.
    #
    # @return [Treetop::Runtime::SyntaxNode] The second newline node.
    def newline2
      elements[4]
    end
  end

  # Parses the YAML front matter node.
  #
  # @return [Treetop::Runtime::SyntaxNode] The parsed YAML front matter node.
  def _nt_yaml_front_matter
    start_index = index
    if node_cache[:yaml_front_matter].has_key?(index)
      cached = node_cache[:yaml_front_matter][index]
      if cached
        node_cache[:yaml_front_matter][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s0 = []
    if (match_len = has_terminal?("---", false, index))
      r1 = instantiate_node(SyntaxNode, input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure("'---'")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_newline
      s0 << r2
      if r2
        s3 = []
        i3 = index
        loop do
          i4 = index
          s4 = []
          i5 = index
          if (match_len = has_terminal?("---", false, index))
            r6 = instantiate_node(SyntaxNode, input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure("'---'")
            r6 = nil
          end
          if r6
            @index = i5
            r5 = nil
            terminal_parse_failure("'---'", true)
          else
            @terminal_failures.pop
            @index = i5
            r5 = instantiate_node(SyntaxNode, input, index...index)
          end
          s4 << r5
          if r5
            if index < input_length
              r7 = true
              @index += 1
            else
              terminal_parse_failure("any character")
              r7 = nil
            end
            s4 << r7
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode, input, i4...index, s4)
            r4.extend(YamlFrontMatter0)
          else
            @index = i4
            r4 = nil
          end
          break unless r4

          s3 << r4
        end
        r3 = instantiate_node(SyntaxNode, input, i3...index, s3)
        s0 << r3
        if r3
          if (match_len = has_terminal?("---", false, index))
            r8 = instantiate_node(SyntaxNode, input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure("'---'")
            r8 = nil
          end
          s0 << r8
          if r8
            r9 = _nt_newline
            s0 << r9
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode, input, i0...index, s0)
      r0.extend(YamlFrontMatter1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:yaml_front_matter][start_index] = r0

    r0
  end

  # Parses the Markdown content node.
  #
  # @return [Treetop::Runtime::SyntaxNode] The parsed Markdown content node.
  def _nt_markdown_content
    start_index = index
    if node_cache[:markdown_content].has_key?(index)
      cached = node_cache[:markdown_content][index]
      if cached
        node_cache[:markdown_content][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0 = []
    i0 = index
    loop do
      if index < input_length
        r1 = true
        @index += 1
      else
        terminal_parse_failure("any character")
        r1 = nil
      end
      break unless r1

      s0 << r1
    end
    r0 = instantiate_node(SyntaxNode, input, i0...index, s0)

    node_cache[:markdown_content][start_index] = r0

    r0
  end

  # Parses the newline node.
  #
  # @return [Treetop::Runtime::SyntaxNode] The parsed newline node.
  def _nt_newline
    start_index = index
    if node_cache[:newline].has_key?(index)
      cached = node_cache[:newline][index]
      if cached
        node_cache[:newline][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0 = []
    i0 = index
    loop do
      if has_terminal?(@regexps[gr = '\A[\n\r]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[\n\r]')
        r1 = nil
      end
      break unless r1

      s0 << r1
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode, input, i0...index, s0)
    end

    node_cache[:newline][start_index] = r0

    r0
  end
end

# The MarkdownYamlParser class is responsible for parsing the Markdown YAML grammar.
class MarkdownYamlParser < Treetop::Runtime::CompiledParser
  include MarkdownYaml
end
