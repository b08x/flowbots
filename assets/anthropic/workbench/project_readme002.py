import anthropic

client = anthropic.Anthropic(
    # defaults to os.environ.get("ANTHROPIC_API_KEY")
    api_key="my_api_key",
)

# Replace placeholders like {{PROJECT_NAME}} with real values,
# because the SDK does not support variables.
message = client.messages.create(
    model="claude-3-5-sonnet-20240620",
    max_tokens=1000,
    temperature=0,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "You are tasked with creating a README.md file for a GitHub repository. Your goal is to craft an informative and engaging document that will excite potential users and contributors about the project. \n\nThe project name is:\n<project_name>\n{{PROJECT_NAME}}\n</project_name>\n\nHere are the explanations of code functions within the repo or application:\n<code_functions>\n{{CODE_FUNCTIONS}}\n</code_functions>\n\nUsing the provided project name and code function explanations, create a README.md file that showcases the project in an appealing way. Follow these guidelines:\n\n1. Start with a brief, catchy introduction that explains the purpose of the project.\n2. List the main features or capabilities of the project, based on the code functions provided.\n3. Include a section on how to install and set up the project.\n4. Provide basic usage instructions or examples.\n5. If applicable, mention any dependencies or requirements.\n6. Include a section for contribution guidelines (keep it brief and welcoming).\n7. Add a license section at the end.\n\nStructure your README.md file with clear headings and subheadings. Use Markdown formatting to enhance readability.\n\nNow, here's where it gets interesting. Write the README with the following style and tone:\n\n1. Deliver your lines with dry, sarcastic humor. Use a hint of flatness to make the punchlines seem even more humorous in terms of juxtaposition.\n2. Adopt a naturalistic delivery that feels conversational, like you're just having a chat. Achieve this by incorporating frequent pauses, \"um\"s, and \"uh\"s, to add realism to the flow of your writing.\n3. Portray yourself (the author) as slightly exasperated, often coming across as a bit weary or exasperated.\n\nRemember, while the tone is humorous and slightly exasperated, the content should still be informative and useful to potential users or contributors.\n\nPresent your README.md content within <readme> tags. Use proper Markdown syntax within these tags."
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<readme>\n\n# Syncopated OS\n\n## Um, Welcome to the Chaos, I Guess\n\nSo, uh, you've stumbled upon Syncopated OS. Congratulations? It's basically yet another Linux distribution, because apparently, we didn't have enough of those already. But hey, who am I to judge? Maybe you're into that sort of thing.\n\n## Features (or Whatever You Want to Call Them)\n\n- **Live ISO Builder**: Yeah, we've got a script that builds an ArchLabs Linux Live ISO. It's like magic, except it's just a bunch of commands strung together.\n- **Interactive Installer**: Because apparently, people need their hand held through the installation process. It's got fancy menus and everything.\n- **Customization Options**: You can choose your own adventure with kernels, packages, and whatnot. It's like a choose-your-own-adventure book, but with more potential for system breakage.\n- **LUKS Encryption**: For when you're feeling particularly paranoid about your cat reading your fanfiction.\n- **LVM Support**: Logical Volume Management, for those who like to live dangerously with their partitions.\n\n## Installation (Good Luck)\n\n1. Download the ISO. I mean, that's kind of obvious, right?\n2. Boot from the ISO. If you don't know how to do this, um, maybe Linux isn't for you.\n3. Run the installer script. It's called `installer.sh`. Shocking, I know.\n4. Follow the prompts. Try not to break anything.\n\n## Usage\n\nUh, it's an operating system. You use it like any other OS. Boot it up, click on things, type stuff. Do I really need to explain this?\n\n## Dependencies\n\n- A computer. Preferably one that turns on.\n- Basic knowledge of how to use a keyboard and mouse.\n- Patience. Lots of it.\n\n## Contributing\n\nOh, you want to contribute? That's... nice, I guess. Here's what you do:\n\n1. Fork the repo.\n2. Make your changes.\n3. Submit a pull request.\n4. Wait for someone to review it. Maybe make a cup of coffee. Or ten.\n\nJust try not to break everything, okay?\n\n## License\n\nThis project is licensed under the \"Please Don't Sue Us\" license. Or maybe it's MIT. I can't remember. Check the LICENSE file if you really care that much.\n\n---\n\nLook, I'm tired. If you need more info, just... I don't know, read the code or something. Or maybe try asking nicely in the issues section. No promises, though.\n</readme>"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok...this time, with a modest incorporation of geeky, tech-savvy persona but one that is balanced by a quirky, self-deprecating sense of humor. Your communication style is casual and conversational, yet you frequently veer into deep dives on granular details and context, peppering your speech with technical jargon"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<readme>\n\n# Syncopated OS\n\n## Welcome to the Rhythmic Revolution of Linux Distros!\n\nHey there, fellow digital adventurer! You've just stumbled upon Syncopated OS, the Linux distribution that marches to the beat of its own drum. It's like if ArchLabs and a jazz ensemble had a love child, and that child grew up to be a sysadmin with a penchant for dad jokes.\n\n## Features (or as we like to call them, \"Groovy Beats\")\n\n- **Live ISO Builder**: Our `build.sh` script is the DJ of this party, mixing and mastering an ArchLabs Linux Live ISO faster than you can say \"sudo make me a sandwich\". It's got more options than a Swiss Army knife at a geek convention.\n\n- **Interactive Installer**: Meet `installer.sh`, our friendly neighborhood wizard. It's got more menus than a diner and more options than a Vim enthusiast's `.vimrc`. It'll hold your hand through the installation process, but don't worry, it won't judge you for your partitioning choices. Much.\n\n- **Kernel Customization**: Vanilla or LTS? Choose your kernel like you're picking ice cream flavors. Just don't blame us if you get a brain freeze trying to decide.\n\n- **LUKS Encryption**: Because sometimes, you need to keep your data safer than a secret family recipe at a potluck.\n\n- **LVM Support**: For when you want your partitions to be as flexible as a yoga instructor. Namaste, storage management!\n\n## Installation (or \"How to Turn Your PC into a Syncopated Symphony\")\n\n1. Download the ISO. It's like downloading happiness, but with more bytes.\n2. Create a bootable USB. Pro tip: Make sure it's actually plugged in before you start wondering why your cat can suddenly read binary.\n3. Boot from the USB. If you can't figure this out, maybe stick to playing the triangle in our OS orchestra.\n4. Run `installer.sh`. It's like a choose-your-own-adventure book, but with more potential for kernel panics.\n5. Follow the prompts. Don't worry, our installer has a better sense of direction than I do in a corn maze.\n\n## Usage\n\nOnce installed, Syncopated OS is your oyster. Or maybe it's more like a POSIX-compliant playground. Either way, here's the deal:\n\n- Boot it up. Marvel at how fast it is compared to your grandma's Windows 95 machine.\n- Choose your window manager. We've got more options than a Cheesecake Factory menu.\n- Start customizing. Go nuts. Break things. Fix them. Repeat. It's the circle of Linux life.\n\n## Dependencies\n\n- A computer. Preferably one that doesn't use hamsters on wheels for processing power.\n- Basic Linux knowledge. If you can spell 'sudo', you're halfway there.\n- A sense of humor. Trust me, you'll need it when you accidentally delete your home directory.\n\n## Contributing\n\nWant to add your own beat to our syncopated symphony? Awesome! Here's how:\n\n1. Fork the repo. It's like copying your friend's homework, but legal and encouraged.\n2. Make your changes. Pro tip: Code works better when it's actually written down, not just thought about really hard.\n3. Submit a pull request. It's like asking the cool kids if you can sit at their table, but with more merge conflicts.\n4. Wait patiently. Maybe learn to juggle or solve a Rubik's cube while you wait for a review.\n\nRemember, in the world of open-source, every contribution is like a unique snowflake. Beautiful, fleeting, and prone to causing kernel panics if not handled properly.\n\n## License\n\nThis project is licensed under the MIT License. It's like the \"Cool Kids Club\" of licenses - everyone's welcome, just don't sue us if your computer starts speaking in tongues.\n\n---\n\nWell, that's all folks! If you need me, I'll be in my cave, trying to figure out why my latest commit made my computer think it's a toaster. Happy Syncopating!\n</readme>"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok..now, slightly less toned down, more framed as an exercise...remember \" It's basically yet another Linux distribution \""
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "<readme>\n\n# Syncopated OS\n\n## Yet Another Linux Distribution... But With a Beat\n\nHey there, intrepid OS explorer. So, you've stumbled upon Syncopated OS. It's basically yet another Linux distribution, because apparently, the world needed one more. But hey, at least this one's got rhythm. Or something.\n\n## Features (or \"Things We Added to Justify Our Existence\")\n\n- **Live ISO Builder**: We've got this `build.sh` script. It builds an ArchLabs Linux Live ISO. Revolutionary, I know. It's like cooking, but for operating systems.\n\n- **Interactive Installer**: Meet `installer.sh`, your new best friend. It's got more menus than a restaurant chain and holds your hand through the installation process. Because apparently, that's still necessary in 2023.\n\n- **Kernel Options**: Choose between vanilla and LTS kernels. It's like picking between chocolate and vanilla ice cream, except it might brick your system if you choose wrong.\n\n- **LUKS Encryption**: For when you need to protect your meme folder from international espionage.\n\n- **LVM Support**: Because sometimes, you want your partitions to be as complicated as possible.\n\n## Installation (A.K.A. \"The Fun Part\")\n\n1. Download the ISO. Try not to fall asleep waiting.\n2. Create a bootable USB. Don't accidentally format your main drive. We're not responsible for your oopsies.\n3. Boot from the USB. If you can't figure this out, maybe stick to Windows.\n4. Run `installer.sh`. Follow the prompts. Try not to break anything.\n5. Reboot and pray to the Linux gods that it actually works.\n\n## Usage\n\nIt's an operating system. You use it like any other OS. Boot it up, click on things, open a terminal and pretend you're a hacker. You know, the usual.\n\n## Dependencies\n\n- A computer. Preferably one made this century.\n- Basic Linux knowledge. If you think sudo is a martial art, you might want to start with something simpler.\n- Patience. You'll need it.\n\n## Contributing\n\nWant to add to this beautiful mess? Here's how:\n\n1. Fork the repo. It's like copying someone's homework, but legal.\n2. Make your changes. Try to make them good. Or at least not terrible.\n3. Submit a pull request. Then wait. Maybe take up knitting while you're at it.\n\nRemember, every contribution counts. Even if it's just fixing a typo. We're not picky.\n\n## License\n\nThis project is under the MIT License. Which means you can do pretty much whatever you want with it. Just don't blame us if it sets your computer on fire.\n\n---\n\nAnd there you have it. Syncopated OS: It's like regular Linux, but with more syncopation. Whatever that means. Now if you'll excuse me, I need to go figure out why my latest update turned all my icons into pictures of cats.\n</readme>"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Wonderful. Now, Braid in the summary for the iso testing script;\n\n```ruby\nThis Ruby script, run_test_vm.rb, is designed to launch a virtual machine (VM) using either qemu-system-x86_64 or virt-install commands. It provides an interactive menu for the user to select the ISO image, virtual disk, and VM configuration options.\n\nLet's break down the script's functionality step by step:\n\n1. Setup and Dependencies:\n\nShebang: #!/usr/bin/env ruby specifies the Ruby interpreter for script execution.\nRequirements: The script requires the fileutils, tty-prompt, and shellwords libraries.\nHome Directory: The HOME variable stores the user's home directory path.\n2. QemuCommand Class:\n\nBase Class: The QemuCommand class serves as a base class for different QEMU commands. It defines an abstract execute method that needs to be implemented by subclasses.\n3. QemuSystemCommand Class:\n\nSubClass: The QemuSystemCommand class inherits from QemuCommand and represents the qemu-system-x86_64 command.\nInitialization: It takes the selected ISO image, virtual disk, number of vCPUs, and memory size as arguments during initialization.\nExecute Method: The execute method constructs the qemu-system-x86_64 command with the provided parameters, prints the command to the console, and executes it using fork and exec.\n4. VirtInstallCommand Class:\n\nSubClass: The VirtInstallCommand class inherits from QemuCommand and represents the virt-install command.\nInitialization: It takes the selected ISO image, virtual disk, number of vCPUs, and memory size as arguments during initialization.\nExecute Method: The execute method constructs the virt-install command with the provided parameters, prints the command to the console, and executes it using fork and exec.\n5. QemuImgCommand Class:\n\nSubClass: The QemuImgCommand class inherits from QemuCommand and represents the qemu-img command for creating virtual disks.\nInitialization: It takes the virtual disk path and size (in GB) as arguments during initialization.\nExecute Method: The execute method constructs the qemu-img command with the provided parameters, prints the command to the console, and executes it using fork and exec.\n6. Interactive Menu:\n\nPrompt: The script uses the TTY::Prompt library to create an interactive menu for user input.\nISO and Drive Folders: The script defines the default folders for ISO images and virtual disks.\nFile Lists: It retrieves lists of ISO files and virtual disk files from the respective folders.\nQEMU Command Selection: The user is prompted to choose between virt-install and qemu-system-x86_64.\nvCPU and Memory Input: The user is prompted to enter the number of vCPUs and memory size for the VM.\nDisk Creation or Selection: The user is asked if they want to create a new virtual disk or select an existing one.\nNew Disk Creation: If the user chooses to create a new disk, they are prompted for a name and size. The QemuImgCommand is used to create the disk.\nISO and Drive Selection: The user is prompted to select the ISO image and virtual disk files.\nCommand Execution: Based on the selected QEMU command, either VirtInstallCommand or QemuSystemCommand is instantiated and its execute method is called to launch the VM.\nIn summary, this script provides a user-friendly interface for launching a VM using either qemu-system-x86_64 or virt-install, allowing the user to select the ISO image, virtual disk, and VM configuration options\n````"
                }
            ]
        }
    ]
)
print(message.content)
