```mermaid
classDiagram
    class CLI {
        +version()
        +workflows()
        +train_topic_model(folder)
        +process_text(file)
    }

    class Workflows {
        -prompt: TTY::Prompt
        +list_and_select()
        +run(workflow_name)
        -get_workflows()
        -display_workflows(workflows)
        -select_workflow(workflows)
        -extract_workflow_description(file)
    }

    class WorkflowOrchestrator {
        -agents: Map
        +add_agent(role, cartridge_file)
        +define_workflow(workflow_definition)
        +run_workflow()
    }

    class WorkflowAgent {
        -role: String
        -state: Map
        -bot: NanoBot
        +process(input)
        +save_state()
        +load_state()
    }

    class Task {
        <<abstract>>
        +execute()
    }

    class TextProcessingWorkflow {
        -input_file_path: String
        -orchestrator: WorkflowOrchestrator
        +run()
    }

    class TopicModelTrainerWorkflow {
        -input_folder_path: String
        -orchestrator: WorkflowOrchestrator
        +run()
    }

    class TextProcessor {
        <<abstract>>
        +process(text)
    }

    class NLPProcessor {
        -nlp_model: Object
        +process(segment, options)
    }

    class TopicModelProcessor {
        -model_path: String
        -model: Object
        -model_params: Map
        +load_or_create_model()
        +train_model(documents, iterations)
        +infer_topics(document)
    }

    class FileLoader {
        -file_data: Textfile
        +initialize(file_path)
    }

    class Textfile {
        +path: String
        +name: String
        +content: String
        +preprocessed_content: String
        +metadata: Map
        +topics: Set~Topic~
        +segments: List~Segment~
        +lemmas: List~Lemma~
    }

    class Segment {
        +text: String
        +tokens: List
        +tagged: Map
        +words: List~Word~
    }

    class Word {
        +word: String
        +pos: String
        +tag: String
        +dep: String
        +ner: String
    }

    class Topic {
        +name: String
        +description: String
        +vector: List
    }

    CLI --> Workflows : uses
    Workflows --> TextProcessingWorkflow : runs
    Workflows --> TopicModelTrainerWorkflow : runs
    TextProcessingWorkflow --> WorkflowOrchestrator : uses
    TopicModelTrainerWorkflow --> WorkflowOrchestrator : uses
    WorkflowOrchestrator --> WorkflowAgent : manages
    WorkflowOrchestrator --> Task : executes
    Task <|-- FileLoaderTask
    Task <|-- PreprocessTextFileTask
    Task <|-- TextSegmentTask
    Task <|-- TokenizeSegmentsTask
    Task <|-- NlpAnalysisTask
    Task <|-- TopicModelingTask
    Task <|-- LlmAnalysisTask
    Task <|-- DisplayResultsTask
    TextProcessor <|-- NLPProcessor
    TextProcessor <|-- TopicModelProcessor
    NlpAnalysisTask --> NLPProcessor : uses
    TopicModelingTask --> TopicModelProcessor : uses
    FileLoaderTask --> FileLoader : uses
    Textfile "1" *-- "many" Segment
    Segment "1" *-- "many" Word
    Textfile "1" *-- "many" Topic
    Textfile "1" *-- "many" Lemma
```